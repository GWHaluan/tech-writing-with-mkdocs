{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Writing with mkdocs \u00b6 Hello! I am a Technical Writer specializing in software documentation and I am using Markdown and mkdocs to create my user documentation and API documentation. On this github pages space, I want to write about tricks and methods that I discovered to improve mkdocs.","title":"Home"},{"location":"#technical-writing-with-mkdocs","text":"Hello! I am a Technical Writer specializing in software documentation and I am using Markdown and mkdocs to create my user documentation and API documentation. On this github pages space, I want to write about tricks and methods that I discovered to improve mkdocs.","title":"Technical Writing with mkdocs"},{"location":"config/","text":"Setup and Configuration \u00b6 git \u00b6 Install git . mkdocs \u00b6 Install mkdocs . mkdocs is written in Python. First, install Python , then download get-pip . Execute the following command in the directory with get-pip : python get-pip.py Afterwards, install mkdocs via pip: pip install mkdocs In Ubuntu Linux, you need to take extra steps to install the latest versions of python and pip. See this tutorial for an installation of Python 3.7. A Stack Overflow post provides some additional tricks . It is best to keep a 3.7 -suffix for pip, so the references are unambiguous: user@machine:~/Desktop$ python --version Python 2.7.15rc1 user@machine:~/Desktop$ python3.7 --version Python 3.7.0 user@machine:~/Desktop$ pip --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) user@machine:~/Desktop$ pip3.7 --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) In this case, pip is only installed in Python 3.7. Theme \u00b6 There are a couple of themes for mkdocs. I prefer Material , as it offers the most polished look and feel. Install it via pip: pip install mkdocs-material Activate the Material theme via your mkdocs.yml file: theme : name : 'material' Note Material overrides the built-in search bar, which has been greatly improved with regard to performance in the 1.0.0 Milestone release of mkdocs. In very large projects, this can cause the frontend to freeze for a several seconds which is unacceptable UX. Styling \u00b6 While your theme dictates a general look and feel, you can style your documentation page in a number of ways. Include css files via your mkdocs.yml file: extra_css : - 'stylesheets/css.css' Set a favicon and logo via your theme in your mkdocs.yml file: theme : name : 'material' logo : 'favicon.ico' favicon : 'favicon.ico' Comments \u00b6 Sadly, Markdown does not provide a syntax for comments. There is a somewhat dirty workaround with comments in link syntax with empty link text, for example: [](This comment cannot be seen because there is no link text) You can also just use html comments: <!-- A comment --> This comment will be visible in the page source when you convert to html though. The cleanest implementation for Markdown comments is the Markdown extension mkdcomments . Install it via pip: pip install git+https://github.com/ryneeverett/python-markdown-comments.git Activate it via your mkdocs.yml file: markdown_extensions : - mkdcomments Now you can use html comments with a slight modification (three dashes instead of two), and they will not appear in the page source when you convert to html: <!--- A comment --> Includes \u00b6 Sadly, Markdown does not provide a syntax to include a partial or the entire content of other Markdown files. Luckily, there is a Markdown extension for it: Markdon-Include . Install it with: pip install git+https://github.com/ryneeverett/python-markdown-comments.git Activate it via your mkdocs.yml file: markdown_extensions : - markdown_include.include Note that the .include suffix is necessary. Reference other Markdown files like this: !path/to/filename.md! but wrapped in { and } . Note that you can set a base URL for include paths: markdown_extensions : - markdown_include.include : base_path : docs This base path will be prefixed to paths you set for includes. If there are broken links, a warning will appear on your mkdocs build or mkdocs serve console output: WARNING - Documentation file 'config.md' contains a link to 'deadlink.md' which is not found in the documentation files. However, you cannot configure mkdocs to fail its build or serve in case of a warning, as the use of strict mode would do. The source code uses a print statement for the warning in the except block of the run function. My recommendation for an error exit upon broken links would be to: clone the repository override the except block like so: except Exception as e: print('Warning: could not find file {}. Ignoring ' 'include statement. Error: {}'.format(filename, e)) lines[loc] = INC_SYNTAX.sub('',line) raise e i.e., rather than using a break statement, raise the exception and cause an error. install markdown locally via: pip install -e . in the directory where you modified the cloned include extension. You might as well host the fork, e.g. in bitbucket, and install it from there. Code Highlighting \u00b6 There is an extension for code highlighting that works beautifully with the Material theme: codehilite . Activate it via your mkdocs.yml file: markdown_extensions : - codehilite ToC Permalinks \u00b6 To enable Permalinks for your page headlines, use the toc extension and add the following snippet to your mkdocs.yml file: markdown_extensions : - toc : permalink : True Next to each headline, a paragraph symbol will appear upon hover, and act as an anchor URL to the section. When you click it, you can copy the link from your browser address bar. There is a problem with the toc extension: Anchor links are generated from headlines, and specifically from the headline strings. However, they are language-specific. In case you want to translate your project, translating any headlines other than first level, will break any incoming links to their sections. There is a workaround, refer to my idea for translation post-processing . Mermaid Diagrams \u00b6 With mermaid diagrams , you can create certain types of schematic images via a simple syntax and maintain the image source code directly within your Markdown files. mermaid is written in Javascript, and thus you can include its script and css files in your mkdocs.yml file: extra_css : - https://unpkg.com/mermaid@7.1.2/dist/mermaid.css extra_javascript : - https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js You can now embed a graph definition in a div -tag with class attribute of mermaid in your Markdown files like so: <div class= \"mermaid\" > graph LR Start --> Stop </div> mermaidjs will convert this to a graph like so: graph LR Start --> Stop In order to use the fenced code macro ``` mermaid instead of html tags, you need to customize a Markdown extension called pymdownx . Add the following to your mkdocs.yml file: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_div_format Check out gilbsgilbs' post here .","title":"Setup and Configuration"},{"location":"config/#setup-and-configuration","text":"","title":"Setup and Configuration"},{"location":"config/#git","text":"Install git .","title":"git"},{"location":"config/#mkdocs","text":"Install mkdocs . mkdocs is written in Python. First, install Python , then download get-pip . Execute the following command in the directory with get-pip : python get-pip.py Afterwards, install mkdocs via pip: pip install mkdocs In Ubuntu Linux, you need to take extra steps to install the latest versions of python and pip. See this tutorial for an installation of Python 3.7. A Stack Overflow post provides some additional tricks . It is best to keep a 3.7 -suffix for pip, so the references are unambiguous: user@machine:~/Desktop$ python --version Python 2.7.15rc1 user@machine:~/Desktop$ python3.7 --version Python 3.7.0 user@machine:~/Desktop$ pip --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) user@machine:~/Desktop$ pip3.7 --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) In this case, pip is only installed in Python 3.7.","title":"mkdocs"},{"location":"config/#theme","text":"There are a couple of themes for mkdocs. I prefer Material , as it offers the most polished look and feel. Install it via pip: pip install mkdocs-material Activate the Material theme via your mkdocs.yml file: theme : name : 'material' Note Material overrides the built-in search bar, which has been greatly improved with regard to performance in the 1.0.0 Milestone release of mkdocs. In very large projects, this can cause the frontend to freeze for a several seconds which is unacceptable UX.","title":"Theme"},{"location":"config/#styling","text":"While your theme dictates a general look and feel, you can style your documentation page in a number of ways. Include css files via your mkdocs.yml file: extra_css : - 'stylesheets/css.css' Set a favicon and logo via your theme in your mkdocs.yml file: theme : name : 'material' logo : 'favicon.ico' favicon : 'favicon.ico'","title":"Styling"},{"location":"config/#comments","text":"Sadly, Markdown does not provide a syntax for comments. There is a somewhat dirty workaround with comments in link syntax with empty link text, for example: [](This comment cannot be seen because there is no link text) You can also just use html comments: <!-- A comment --> This comment will be visible in the page source when you convert to html though. The cleanest implementation for Markdown comments is the Markdown extension mkdcomments . Install it via pip: pip install git+https://github.com/ryneeverett/python-markdown-comments.git Activate it via your mkdocs.yml file: markdown_extensions : - mkdcomments Now you can use html comments with a slight modification (three dashes instead of two), and they will not appear in the page source when you convert to html: <!--- A comment -->","title":"Comments"},{"location":"config/#includes","text":"Sadly, Markdown does not provide a syntax to include a partial or the entire content of other Markdown files. Luckily, there is a Markdown extension for it: Markdon-Include . Install it with: pip install git+https://github.com/ryneeverett/python-markdown-comments.git Activate it via your mkdocs.yml file: markdown_extensions : - markdown_include.include Note that the .include suffix is necessary. Reference other Markdown files like this: !path/to/filename.md! but wrapped in { and } . Note that you can set a base URL for include paths: markdown_extensions : - markdown_include.include : base_path : docs This base path will be prefixed to paths you set for includes. If there are broken links, a warning will appear on your mkdocs build or mkdocs serve console output: WARNING - Documentation file 'config.md' contains a link to 'deadlink.md' which is not found in the documentation files. However, you cannot configure mkdocs to fail its build or serve in case of a warning, as the use of strict mode would do. The source code uses a print statement for the warning in the except block of the run function. My recommendation for an error exit upon broken links would be to: clone the repository override the except block like so: except Exception as e: print('Warning: could not find file {}. Ignoring ' 'include statement. Error: {}'.format(filename, e)) lines[loc] = INC_SYNTAX.sub('',line) raise e i.e., rather than using a break statement, raise the exception and cause an error. install markdown locally via: pip install -e . in the directory where you modified the cloned include extension. You might as well host the fork, e.g. in bitbucket, and install it from there.","title":"Includes"},{"location":"config/#code-highlighting","text":"There is an extension for code highlighting that works beautifully with the Material theme: codehilite . Activate it via your mkdocs.yml file: markdown_extensions : - codehilite","title":"Code Highlighting"},{"location":"config/#toc-permalinks","text":"To enable Permalinks for your page headlines, use the toc extension and add the following snippet to your mkdocs.yml file: markdown_extensions : - toc : permalink : True Next to each headline, a paragraph symbol will appear upon hover, and act as an anchor URL to the section. When you click it, you can copy the link from your browser address bar. There is a problem with the toc extension: Anchor links are generated from headlines, and specifically from the headline strings. However, they are language-specific. In case you want to translate your project, translating any headlines other than first level, will break any incoming links to their sections. There is a workaround, refer to my idea for translation post-processing .","title":"ToC Permalinks"},{"location":"config/#mermaid-diagrams","text":"With mermaid diagrams , you can create certain types of schematic images via a simple syntax and maintain the image source code directly within your Markdown files. mermaid is written in Javascript, and thus you can include its script and css files in your mkdocs.yml file: extra_css : - https://unpkg.com/mermaid@7.1.2/dist/mermaid.css extra_javascript : - https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js You can now embed a graph definition in a div -tag with class attribute of mermaid in your Markdown files like so: <div class= \"mermaid\" > graph LR Start --> Stop </div> mermaidjs will convert this to a graph like so: graph LR Start --> Stop In order to use the fenced code macro ``` mermaid instead of html tags, you need to customize a Markdown extension called pymdownx . Add the following to your mkdocs.yml file: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_div_format Check out gilbsgilbs' post here .","title":"Mermaid Diagrams"},{"location":"link/","text":"Link checking \u00b6","title":"Solved: Link Checking"},{"location":"link/#link-checking","text":"","title":"Link checking"},{"location":"nav/","text":"Distributed navigation \u00b6","title":"Solved: Distributed Navigation"},{"location":"nav/#distributed-navigation","text":"","title":"Distributed navigation"},{"location":"tlpostproc/","text":"Translation Post-Processing \u00b6","title":"Idea: Translation Post-Processing"},{"location":"tlpostproc/#translation-post-processing","text":"","title":"Translation Post-Processing"},{"location":"why/","text":"Why mkdocs? \u00b6 There are many ways to organize your Technical Writing. What it comes down to, is your specific use case. When i started my last job, the situation was this: We wanted to provide useful user documentation There were many Word documents that were or were not up to date Confluence and Scroll Viewport were proposed as a solution Some effort had been done to implement this, mostly text conversion from Word to Confluence We decided against Confluence and used Markdown and mkdocs instead. Our reasons were: Confluence and most of its plugins are proprietary and WYSIWYG For business reasons, we did not have direct control over Scroll Viewport styling There was no link between Confluence and the software release process We saw a major gap to our software development as developers disliked using Confluence Pipeline and deployment tools were already in use in the development teams Markdown is simple and therefore easily customizable and portable Features \u00b6 Plain Text Source \u00b6 Markdown is an easy to pick up simple markup language and thus in plain text format. Writing texts in plain text format is an advantage because you store and maintain information on how it is displayed separately. Theming and Styling via mkdocs \u00b6 mkdocs has a number of more or less well-designed themes. You can alter them to your liking. Please refer to my recommended mkdocs setup for more information. Easy Collaboration \u00b6 Due to its plain text nature, you can easily work with a version-control software such as git. Collaboration and reviewing are quite easy that way, and comparable to the maintenance of software code. Checkout docs as code . Problems \u00b6 Static Explicit Navigation \u00b6 Your mkdocs navigation is maintained in the mkdocs.yml file. For complete control, you need to reference every Markdown file that you want to be part of your documentation. You can have Markdown infer the navigation title from the h1 headline of a Markdown file, or override it in your mkdocs.yml file: nav : - Home : index.md - config.md In this example, the navigation entry Home is explicit in the mkdocs.yml file, while the navigation entry for the configuration article is inferred from the h1 headline in the file config.md . There are some problems with such inferences and the state of nested navigation siblings, see mkdocs issue #1347 . In my solution sketched out in the article about distributed navigation , there is a built-in solution for this problem as well. Encoding \u00b6 TODO Software Variants and Versions \u00b6 With a comprehensive mkdocs setup, you are likely using a number of software packages that can all have different versions and that might clash with eachother. I cannot always recommend keeping everything up to date. For example, Multilanguage Support \u00b6 Large Search Index in Large Projects \u00b6","title":"Why mkdocs?"},{"location":"why/#why-mkdocs","text":"There are many ways to organize your Technical Writing. What it comes down to, is your specific use case. When i started my last job, the situation was this: We wanted to provide useful user documentation There were many Word documents that were or were not up to date Confluence and Scroll Viewport were proposed as a solution Some effort had been done to implement this, mostly text conversion from Word to Confluence We decided against Confluence and used Markdown and mkdocs instead. Our reasons were: Confluence and most of its plugins are proprietary and WYSIWYG For business reasons, we did not have direct control over Scroll Viewport styling There was no link between Confluence and the software release process We saw a major gap to our software development as developers disliked using Confluence Pipeline and deployment tools were already in use in the development teams Markdown is simple and therefore easily customizable and portable","title":"Why mkdocs?"},{"location":"why/#features","text":"","title":"Features"},{"location":"why/#plain-text-source","text":"Markdown is an easy to pick up simple markup language and thus in plain text format. Writing texts in plain text format is an advantage because you store and maintain information on how it is displayed separately.","title":"Plain Text Source"},{"location":"why/#theming-and-styling-via-mkdocs","text":"mkdocs has a number of more or less well-designed themes. You can alter them to your liking. Please refer to my recommended mkdocs setup for more information.","title":"Theming and Styling via mkdocs"},{"location":"why/#easy-collaboration","text":"Due to its plain text nature, you can easily work with a version-control software such as git. Collaboration and reviewing are quite easy that way, and comparable to the maintenance of software code. Checkout docs as code .","title":"Easy Collaboration"},{"location":"why/#problems","text":"","title":"Problems"},{"location":"why/#static-explicit-navigation","text":"Your mkdocs navigation is maintained in the mkdocs.yml file. For complete control, you need to reference every Markdown file that you want to be part of your documentation. You can have Markdown infer the navigation title from the h1 headline of a Markdown file, or override it in your mkdocs.yml file: nav : - Home : index.md - config.md In this example, the navigation entry Home is explicit in the mkdocs.yml file, while the navigation entry for the configuration article is inferred from the h1 headline in the file config.md . There are some problems with such inferences and the state of nested navigation siblings, see mkdocs issue #1347 . In my solution sketched out in the article about distributed navigation , there is a built-in solution for this problem as well.","title":"Static Explicit Navigation"},{"location":"why/#encoding","text":"TODO","title":"Encoding"},{"location":"why/#software-variants-and-versions","text":"With a comprehensive mkdocs setup, you are likely using a number of software packages that can all have different versions and that might clash with eachother. I cannot always recommend keeping everything up to date. For example,","title":"Software Variants and Versions"},{"location":"why/#multilanguage-support","text":"","title":"Multilanguage Support"},{"location":"why/#large-search-index-in-large-projects","text":"","title":"Large Search Index in Large Projects"},{"location":"workflow/","text":"Workflows \u00b6 Review \u00b6 Deployment \u00b6 Of course you need to host your documentation somewhere. Pipeline \u00b6 github pages \u00b6 \u00b6","title":"Workflows"},{"location":"workflow/#workflows","text":"","title":"Workflows"},{"location":"workflow/#review","text":"","title":"Review"},{"location":"workflow/#deployment","text":"Of course you need to host your documentation somewhere.","title":"Deployment"},{"location":"workflow/#pipeline","text":"","title":"Pipeline"},{"location":"workflow/#github-pages","text":"","title":"github pages"}]}