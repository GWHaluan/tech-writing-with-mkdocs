{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Technical Writing with mkdocs \u00b6 Hello! I am a Technical Writer specializing in software documentation and I am using Markdown and mkdocs to create my user documentation and API documentation. On this github pages space, I want to write about tricks and methods that I discovered to improve mkdocs.","title":"Home"},{"location":"#technical-writing-with-mkdocs","text":"Hello! I am a Technical Writer specializing in software documentation and I am using Markdown and mkdocs to create my user documentation and API documentation. On this github pages space, I want to write about tricks and methods that I discovered to improve mkdocs.","title":"Technical Writing with mkdocs"},{"location":"config/","text":"Setup and Configuration \u00b6 git \u00b6 Install git . mkdocs \u00b6 Install mkdocs . mkdocs is written in Python. First, install Python , then download get-pip . Execute the following command in the directory with get-pip : python get-pip.py Afterwards, install mkdocs via pip: pip install mkdocs In Ubuntu Linux, you need to take extra steps to install the latest versions of python and pip. See this tutorial for an installation of Python 3.7. A Stack Overflow post provides some additional tricks . It is best to keep a 3.7 -suffix for pip, so the references are unambiguous: user@machine:~/Desktop$ python --version Python 2.7.15rc1 user@machine:~/Desktop$ python3.7 --version Python 3.7.0 user@machine:~/Desktop$ pip --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) user@machine:~/Desktop$ pip3.7 --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) In this case, pip is only installed in Python 3.7. Theme \u00b6 There are a couple of themes for mkdocs. I prefer Material , as it offers the most polished look and feel. Install it via pip: pip install mkdocs-material Note Material overrides the built-in search bar, which has been greatly improved with regard to performance in the 1.0.0 Milestone release of mkdocs. In very large projects, this can cause the frontend to freeze for a several seconds which is unacceptable UX. Styling \u00b6 While your theme dictates a general look and feel, you can style your documentation page in a number of ways. Include css files via your mkdocs.yml file: extra_css : - 'stylesheets/css.css' Set a favicon via your mkdocs.yml file: extra : name : 'material' logo : 'favicon.ico' favicon : 'favicon.ico' Comments \u00b6 Includes \u00b6 Code Highlighting \u00b6 Deployment \u00b6 Pipeline \u00b6 github pages \u00b6 \u00b6","title":"Setup and Configuration"},{"location":"config/#setup-and-configuration","text":"","title":"Setup and Configuration"},{"location":"config/#git","text":"Install git .","title":"git"},{"location":"config/#mkdocs","text":"Install mkdocs . mkdocs is written in Python. First, install Python , then download get-pip . Execute the following command in the directory with get-pip : python get-pip.py Afterwards, install mkdocs via pip: pip install mkdocs In Ubuntu Linux, you need to take extra steps to install the latest versions of python and pip. See this tutorial for an installation of Python 3.7. A Stack Overflow post provides some additional tricks . It is best to keep a 3.7 -suffix for pip, so the references are unambiguous: user@machine:~/Desktop$ python --version Python 2.7.15rc1 user@machine:~/Desktop$ python3.7 --version Python 3.7.0 user@machine:~/Desktop$ pip --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) user@machine:~/Desktop$ pip3.7 --version pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7) In this case, pip is only installed in Python 3.7.","title":"mkdocs"},{"location":"config/#theme","text":"There are a couple of themes for mkdocs. I prefer Material , as it offers the most polished look and feel. Install it via pip: pip install mkdocs-material Note Material overrides the built-in search bar, which has been greatly improved with regard to performance in the 1.0.0 Milestone release of mkdocs. In very large projects, this can cause the frontend to freeze for a several seconds which is unacceptable UX.","title":"Theme"},{"location":"config/#styling","text":"While your theme dictates a general look and feel, you can style your documentation page in a number of ways. Include css files via your mkdocs.yml file: extra_css : - 'stylesheets/css.css' Set a favicon via your mkdocs.yml file: extra : name : 'material' logo : 'favicon.ico' favicon : 'favicon.ico'","title":"Styling"},{"location":"config/#comments","text":"","title":"Comments"},{"location":"config/#includes","text":"","title":"Includes"},{"location":"config/#code-highlighting","text":"","title":"Code Highlighting"},{"location":"config/#deployment","text":"","title":"Deployment"},{"location":"config/#pipeline","text":"","title":"Pipeline"},{"location":"config/#github-pages","text":"","title":"github pages"},{"location":"link/","text":"Link checking \u00b6","title":"Solved: Link Checking"},{"location":"link/#link-checking","text":"","title":"Link checking"},{"location":"nav/","text":"Distributed navigation \u00b6","title":"Solved: Distributed Navigation"},{"location":"nav/#distributed-navigation","text":"","title":"Distributed navigation"},{"location":"why/","text":"Why mkdocs? \u00b6 There are many ways to organize your Technical Writing. What it comes down to, is your specific use case. When i started my last job, the situation was this: We wanted to provide useful user documentation There were many Word documents that were or were not up to date Confluence and Scroll Viewport were proposed as a solution Some effort had been done to implement this, mostly text conversion from Word to Confluence We decided against Confluence and used Markdown and mkdocs instead. Our reasons were: Confluence and most of its plugins are proprietary and WYSIWYG For business reasons, we did not have direct control over Scroll Viewport styling There was no link between Confluence and the software release process We saw a major gap to our software development as developers disliked using Confluence Pipeline and deployment tools were already in use in the development teams Markdown is simple and therefore easily customizable and portable Features \u00b6 Plain text source \u00b6 Theming and styling via mkdocs \u00b6 Easy collaboration \u00b6 Problems \u00b6 Static explicit navigation \u00b6 Software variants and versions \u00b6 Multilanguage support \u00b6 Large search index \u00b6","title":"Why mkdocs?"},{"location":"why/#why-mkdocs","text":"There are many ways to organize your Technical Writing. What it comes down to, is your specific use case. When i started my last job, the situation was this: We wanted to provide useful user documentation There were many Word documents that were or were not up to date Confluence and Scroll Viewport were proposed as a solution Some effort had been done to implement this, mostly text conversion from Word to Confluence We decided against Confluence and used Markdown and mkdocs instead. Our reasons were: Confluence and most of its plugins are proprietary and WYSIWYG For business reasons, we did not have direct control over Scroll Viewport styling There was no link between Confluence and the software release process We saw a major gap to our software development as developers disliked using Confluence Pipeline and deployment tools were already in use in the development teams Markdown is simple and therefore easily customizable and portable","title":"Why mkdocs?"},{"location":"why/#features","text":"","title":"Features"},{"location":"why/#plain-text-source","text":"","title":"Plain text source"},{"location":"why/#theming-and-styling-via-mkdocs","text":"","title":"Theming and styling via mkdocs"},{"location":"why/#easy-collaboration","text":"","title":"Easy collaboration"},{"location":"why/#problems","text":"","title":"Problems"},{"location":"why/#static-explicit-navigation","text":"","title":"Static explicit navigation"},{"location":"why/#software-variants-and-versions","text":"","title":"Software variants and versions"},{"location":"why/#multilanguage-support","text":"","title":"Multilanguage support"},{"location":"why/#large-search-index","text":"","title":"Large search index"}]}